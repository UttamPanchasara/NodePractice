#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('icollect:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket and define global to access from any files
 */
global.io = require('socket.io')(server);

/**
 * get db instance, declared global
 */
global.db = require('../config/dbconfig.js');

/**
 * serverdata instance as global
 */
global.servedata = require('../helpers/servedata');

var eventHandler = require('../ioeventhandler/ioEventHandler');

/**
 * Listen connection events
 */
io.on('connect', onConnected);
io.on('connection', (socket) => {

  socket.on('load_users', (data) => {
    eventHandler.loadUsers(data);
  });

  socket.on('room', function (room) {
    console.log('client want to join :' + room);
    socket.join(room);
  });

  socket.on('send-message', function (data) {
    socket.to(data.roomId).emit('message', data);

    console.log('send to room :' + data.roomId);
    console.log('msg :' + data.message);
  });

  socket.on('typing-msg', function (data) {
    socket.to(data.roomId).emit('typing', data);

    console.log('typing-msg :' + data);
  });

  socket.on('disconnect', onDisconnected);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Socket Event listener
 */

function onConnected() {
  console.log('client connected');
}

function onDisconnected(reason) {
  console.log('client disconnected' + reason);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}